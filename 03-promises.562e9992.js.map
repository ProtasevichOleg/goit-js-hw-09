{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEO,SAASC,EAAoBC,EAAKC,GACvCD,EAAIE,iBAEJ,MAAMC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAIvB,SAAuBJ,GACrB,MAAQK,MAAOH,GAAUF,EAAKM,cAAc,wBACpCD,MAAOF,GAASH,EAAKM,cAAc,uBACnCD,MAAOD,GAAWJ,EAAKM,cAAc,wBAE7C,MAAO,CACLJ,MAAOK,SAASL,GAChBC,KAAMI,SAASJ,GACfC,OAAQG,SAASH,G,CAZaI,CAAcR,IAgBhD,SAAyBE,EAAOC,EAAMC,GACpC,IAAK,IAAIK,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCC,EAAcD,EAAGP,GAASO,EAAI,GAAKN,GAChCQ,KAAKC,GACLC,MAAMC,E,CAnBXC,CAAgBb,EAAOC,EAAMC,E,CAuB/B,SAASQ,GAAiBI,SAAEA,EAAQd,MAAEA,IACpCe,EAAArB,GAASsB,OAAOC,QAAQ,uBAAqBH,QAAiBd,M,CAGhE,SAASY,GAAeE,SAAEA,EAAQd,MAAEA,IAClCe,EAAArB,GAASsB,OAAOE,QAAQ,sBAAoBJ,QAAed,M,CAG7D,SAASQ,EAAcM,EAAUd,GAC/B,OAAO,IAAImB,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEN,E,MAAUd,IAEpBqB,EAAO,C,SAAEP,E,MAAUd,GAAQ,GAE5BA,EAAM,G,CC1Cb,MAAMyB,EAAOC,SAAStB,cAAc,SACpCqB,EAAKE,iBAAiB,UAAU9B,GAAOD,EAAoBC,EAAK4B","sources":["src/js/utils/promiseHelpers.js","src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nexport function onPromiseFormSubmit(evt, form) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = getFormValues(form);\n  processPromises(delay, step, amount);\n}\n\nfunction getFormValues(form) {\n  const { value: delay } = form.querySelector('input[name=\"delay\"]');\n  const { value: step } = form.querySelector('input[name=\"step\"]');\n  const { value: amount } = form.querySelector('input[name=\"amount\"]');\n\n  return {\n    delay: parseInt(delay),\n    step: parseInt(step),\n    amount: parseInt(amount),\n  };\n}\n\nfunction processPromises(delay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay + (i - 1) * step)\n      .then(onPromiseSuccess)\n      .catch(onPromiseError);\n  }\n}\n\nfunction onPromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onPromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n","// ../03-promises.js\n\nimport { onPromiseFormSubmit } from './utils/promiseHelpers';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', evt => onPromiseFormSubmit(evt, form));\n"],"names":["$7Y9D8","parcelRequire","$1b0efcf55fce9e75$export$f80a49ddebbfccd0","evt","form","preventDefault","delay","step","amount","value","querySelector","parseInt","$1b0efcf55fce9e75$var$getFormValues","i","$1b0efcf55fce9e75$var$createPromise","then","$1b0efcf55fce9e75$var$onPromiseSuccess","catch","$1b0efcf55fce9e75$var$onPromiseError","$1b0efcf55fce9e75$var$processPromises","position","$parcel$interopDefault","Notify","success","failure","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$form","document","addEventListener"],"version":3,"file":"03-promises.562e9992.js.map"}